{"version":3,"file":"triangle-group-demo.js","sources":["../triangle-group-demo.js"],"sourcesContent":["import { html, render } from \"lit\";\n\n// --- Helper functions for D₃ ---\n\n// Represent each element as an object { k, d } where k ∈ {0,1,2} and d ∈ {0,1}.\n// Here, d = 0 means no reflection (a rotation) and d = 1 means reflection.\n// Mapping:\n//   \"1\"   → { k: 0, d: 0 }\n//   \"r\"   → { k: 1, d: 0 }\n//   \"r2\"  → { k: 2, d: 0 }\n//   \"f\"   → { k: 0, d: 1 }\n//   \"rf\"  → { k: 1, d: 1 }\n//   \"r2f\" → { k: 2, d: 1 }\nconst elementToObj = {\n  \"1\":   { k: 0, d: 0 },\n  \"r\":   { k: 1, d: 0 },\n  \"r2\":  { k: 2, d: 0 },\n  \"f\":   { k: 0, d: 1 },\n  \"rf\":  { k: 1, d: 1 },\n  \"r2f\": { k: 2, d: 1 }\n};\n\nfunction composeD3(a, b) {\n  const A = elementToObj[a];\n  const B = elementToObj[b];\n  // Multiplication: (k₁, d₁)·(k₂, d₂) = (k₁ + (-1)^(d₁)*k₂ mod 3, d₁+d₂ mod 2)\n  let k = A.k + (A.d === 0 ? B.k : -B.k);\n  k = ((k % 3) + 3) % 3;\n  const d = (A.d + B.d) % 2;\n  for (let key in elementToObj) {\n    const val = elementToObj[key];\n    if (val.k === k && val.d === d) return key;\n  }\n  return null;\n}\n\nfunction inverseD3(a) {\n  for (let candidate in elementToObj) {\n    if (composeD3(a, candidate) === \"1\") return candidate;\n  }\n  return null;\n}\n\n/**\n * Convert a D₃ element (as a string) to a MathML representation.\n */\nfunction displayD3(elem) {\n  switch (elem) {\n    case \"1\":\n      return \"<mi>1</mi>\";\n    case \"r\":\n      return \"<mi>r</mi>\";\n    case \"r2\":\n      return \"<msup><mi>r</mi><mn>2</mn></msup>\";\n    case \"f\":\n      return \"<mi>f</mi>\";\n    case \"rf\":\n      return \"<mrow><mi>r</mi><mo>&#x22C5;</mo><mi>f</mi></mrow>\";\n    case \"r2f\":\n      return \"<mrow><msup><mi>r</mi><mn>2</mn></msup><mo>&#x22C5;</mo><mi>f</mi></mrow>\";\n    default:\n      return `<mi>${elem}</mi>`;\n  }\n}\n\n// --- The TriangleGroupDemo Component ---\n\nclass TriangleGroupDemo extends HTMLElement {\n  constructor() {\n    super();\n    this.attachShadow({ mode: \"open\" });\n  }\n  \n  connectedCallback() {\n    this.render();\n    // Set up interactive group property demonstrations.\n    this.setupInteractive();\n  }\n  \n  /**\n   * Reset the triangle and its vertex labels.\n   */\n  resetTriangle() {\n    const group = this.shadowRoot.getElementById(\"triangle-group\");\n    if (group) {\n      group.getAnimations().forEach(animation => animation.cancel());\n      group.setAttribute(\"transform\", \"rotate(0) scale(1)\");\n    }\n    const labels = this.shadowRoot.querySelectorAll('.vertex-label');\n    labels.forEach(label => label.removeAttribute('transform'));\n  }\n  \n  /**\n   * Animate a rotation from 0° to targetAngle.\n   */\n  animateRotation(targetAngle, duration = 500) {\n    const group = this.shadowRoot.getElementById(\"triangle-group\");\n    if (!group) return;\n    let startTime = null;\n    const initialAngle = 0;\n    const step = (timestamp) => {\n      if (!startTime) startTime = timestamp;\n      const elapsed  = timestamp - startTime;\n      const progress = Math.min(elapsed / duration, 1);\n      const currentAngle = initialAngle + progress * (targetAngle - initialAngle);\n      group.setAttribute(\"transform\", `rotate(${currentAngle})`);\n      if (progress < 1) {\n        requestAnimationFrame(step);\n      } else {\n        const labels = this.shadowRoot.querySelectorAll('.vertex-label');\n        labels.forEach(label => {\n          const x = label.getAttribute(\"x\");\n          const y = label.getAttribute(\"y\");\n          label.setAttribute(\"transform\", `rotate(-${targetAngle}, ${x}, ${y})`);\n        });\n      }\n    };\n    requestAnimationFrame(step);\n  }\n  \n  /**\n   * Animate a horizontal flip (reflection) of the triangle.\n   */\n  animateFlip(duration = 500) {\n    const group = this.shadowRoot.getElementById(\"triangle-group\");\n    if (!group) return;\n    let startTime = null;\n    const initialScale = 1;\n    const targetScale = -1;\n    const step = (timestamp) => {\n      if (!startTime) startTime = timestamp;\n      const elapsed  = timestamp - startTime;\n      const progress = Math.min(elapsed / duration, 1);\n      const currentScale = initialScale + progress * (targetScale - initialScale);\n      group.setAttribute(\"transform\", `rotate(0) scale(${currentScale}, 1)`);\n      if (progress < 1) {\n        requestAnimationFrame(step);\n      } else {\n        const labels = this.shadowRoot.querySelectorAll('.vertex-label');\n        labels.forEach(label => {\n          const x = label.getAttribute(\"x\");\n          const y = label.getAttribute(\"y\");\n          label.setAttribute(\"transform\",\n            `translate(${x}, ${y}) scale(-1,1) translate(${-x}, ${-y})`\n          );\n        });\n      }\n    };\n    requestAnimationFrame(step);\n  }\n  \n  /**\n   * Animate a flip then a rotation (r·f).\n   */\n  animateFlipThenRotation(targetAngle, flipDuration = 500, rotationDuration = 500) {\n    const group = this.shadowRoot.getElementById(\"triangle-group\");\n    if (!group) return;\n    let startTimeFlip = null;\n    const stepFlip = (timestamp) => {\n      if (!startTimeFlip) startTimeFlip = timestamp;\n      const elapsed = timestamp - startTimeFlip;\n      const progress = Math.min(elapsed / flipDuration, 1);\n      const currentScale = 1 + progress * (-1 - 1); // = 1 - 2*progress\n      group.setAttribute(\"transform\", `rotate(0) scale(${currentScale}, 1)`);\n      if (progress < 1) {\n        requestAnimationFrame(stepFlip);\n      } else {\n        const labels = this.shadowRoot.querySelectorAll('.vertex-label');\n        labels.forEach(label => {\n          const x = label.getAttribute(\"x\");\n          const y = label.getAttribute(\"y\");\n          label.setAttribute(\"transform\",\n            `translate(${x}, ${y}) scale(-1,1) translate(${-x}, ${-y})`\n          );\n        });\n        startRotationPhase();\n      }\n    };\n    const startRotationPhase = () => {\n      let startTimeRot = null;\n      const stepRotation = (timestamp) => {\n        if (!startTimeRot) startTimeRot = timestamp;\n        const elapsed = timestamp - startTimeRot;\n        const progress = Math.min(elapsed / rotationDuration, 1);\n        const currentRotation = progress * targetAngle;\n        group.setAttribute(\"transform\", `rotate(${currentRotation}) scale(-1,1)`);\n        if (progress < 1) {\n          requestAnimationFrame(stepRotation);\n        } else {\n          const labels = this.shadowRoot.querySelectorAll('.vertex-label');\n          labels.forEach(label => {\n            const x = label.getAttribute(\"x\");\n            const y = label.getAttribute(\"y\");\n            label.setAttribute(\"transform\",\n              `translate(${x}, ${y}) scale(-1,1) rotate(-${targetAngle}) translate(${-x}, ${-y})`\n            );\n          });\n        }\n      };\n      requestAnimationFrame(stepRotation);\n    };\n    requestAnimationFrame(stepFlip);\n  }\n  \n  /**\n   * Visual press and release animations.\n   */\n  raiseTriangle() {\n    const group = this.shadowRoot.getElementById(\"triangle-group\");\n    if (group) {\n      const current = group.getAttribute(\"transform\") || \"\";\n      group.animate([{ transform: current }, { transform: \"scale(1.2)\" }], {\n        duration: 150, fill: \"forwards\", easing: \"ease-out\"\n      });\n      group.setAttribute(\"transform\", \"scale(1.2)\");\n    }\n  }\n  lowerTriangle() {\n    const group = this.shadowRoot.getElementById(\"triangle-group\");\n    if (group) {\n      const current = group.getAttribute(\"transform\") || \"\";\n      group.animate([{ transform: current }, { transform: \"scale(1)\" }], {\n        duration: 150, fill: \"forwards\", easing: \"ease-out\"\n      });\n      group.setAttribute(\"transform\", \"scale(1)\");\n    }\n  }\n  \n  /**\n   * Set up the interactive sections for the D₃ group properties.\n   * Results are inserted as MathML using innerHTML.\n   */\n  setupInteractive() {\n    // Closure\n    this.shadowRoot.getElementById('check-closure').addEventListener('click', () => {\n      const a = this.shadowRoot.getElementById('closure-a').value;\n      const b = this.shadowRoot.getElementById('closure-b').value;\n      const product = composeD3(a, b);\n      this.shadowRoot.getElementById('closure-result').innerHTML =\n        `Result: <math><mrow>${displayD3(a)}<mo>&#x22C5;</mo>${displayD3(b)}<mo>=</mo>${displayD3(product)}</mrow></math>. Closure holds because the result is in D₃.`;\n    });\n    // Identity property: 1 · a = a.\n    this.shadowRoot.getElementById('check-identity-prop').addEventListener('click', () => {\n      const a = this.shadowRoot.getElementById('identity-element').value;\n      const product = composeD3(\"1\", a);\n      this.shadowRoot.getElementById('identity-result-prop').innerHTML =\n        `Result: <math><mrow>${displayD3(\"1\")}<mo>&#x22C5;</mo>${displayD3(a)}<mo>=</mo>${displayD3(product)}</mrow></math>. The identity element is 1.`;\n    });\n    // Associativity: (a · b) · c = a · (b · c)\n    this.shadowRoot.getElementById('check-associativity-prop').addEventListener('click', () => {\n      const a = this.shadowRoot.getElementById('assoc-a').value;\n      const b = this.shadowRoot.getElementById('assoc-b').value;\n      const c = this.shadowRoot.getElementById('assoc-c').value;\n      const left = composeD3(composeD3(a, b), c);\n      const right = composeD3(a, composeD3(b, c));\n      let msg = `Result: <math><mrow>( ${displayD3(a)}<mo>&#x22C5;</mo>${displayD3(b)} )<mo>&#x22C5;</mo>${displayD3(c)}<mo>=</mo>${displayD3(left)}</mrow></math> and <math><mrow>${displayD3(a)}<mo>&#x22C5;</mo>( ${displayD3(b)}<mo>&#x22C5;</mo>${displayD3(c)} )<mo>=</mo>${displayD3(right)}</mrow></math>. `;\n      msg += (left === right) ? \"Associativity holds.\" : \"Associativity fails!\";\n      this.shadowRoot.getElementById('associativity-result-prop').innerHTML = msg;\n    });\n    // Inverse: a · a⁻¹ = 1.\n    this.shadowRoot.getElementById('check-inverse-prop').addEventListener('click', () => {\n      const a = this.shadowRoot.getElementById('inverse-element').value;\n      const inv = inverseD3(a);\n      const prod = composeD3(a, inv);\n      this.shadowRoot.getElementById('inverse-result-prop').innerHTML =\n        `Result: <math><mrow>${displayD3(a)}<mo>&#x22C5;</mo><mo>(</mo><mo>&#x2212;</mo>${displayD3(a)}<mo>)</mo><mo>=</mo><mi>1</mi></mrow></math> (since ${displayD3(a)} · (${displayD3(inv)}) = ${displayD3(prod)}). Inverse holds.`;\n    });\n  }\n  \n  render() {\n    const template = html`\n      <style>\n        :host {\n          display: block;\n          font-family: Arial, sans-serif;\n          margin: 0;\n          padding: 20px;\n          background-color: #eef;\n        }\n        h1 {\n          text-align: center;\n          color: #333;\n        }\n        svg {\n          display: block;\n          margin: 0 auto 20px;\n        }\n        .buttons, .interactive {\n          text-align: center;\n          margin-top: 20px;\n        }\n        button {\n          padding: 8px 16px;\n          margin: 5px;\n          font-size: 14px;\n          cursor: pointer;\n          border: none;\n          border-radius: 4px;\n          background-color: #007bff;\n          color: #fff;\n          transition: background-color 0.3s;\n        }\n        button:hover {\n          background-color: #0056b3;\n        }\n        .math {\n          text-align: center;\n          margin-top: 10px;\n        }\n        section {\n          background: #fff;\n          border: 1px solid #ccc;\n          padding: 15px;\n          margin: 20px auto;\n          max-width: 600px;\n          border-radius: 8px;\n          text-align: left;\n        }\n        section h2 {\n          margin-top: 0;\n          text-align: center;\n        }\n        section label {\n          margin-right: 10px;\n        }\n        section select, section input {\n          margin: 5px;\n          padding: 5px;\n          width: 80px;\n        }\n        section div.result {\n          margin-top: 10px;\n          font-weight: bold;\n          text-align: center;\n        }\n      </style>\n      <h1>Triangle Group Demonstration (Dihedral Group D₃)</h1>\n      \n      <!-- Animated triangle with transformation buttons -->\n      <svg id=\"triangle-svg\" width=\"300\" height=\"300\" viewBox=\"-150 -150 300 300\">\n        <g id=\"triangle-group\">\n          <polygon points=\"0,-100 86.6,50 -86.6,50\" fill=\"#007BFF\" stroke=\"#0056b3\" stroke-width=\"3\"></polygon>\n          <text x=\"0\" y=\"10\" font-size=\"36\" text-anchor=\"middle\" fill=\"white\">🐱</text>\n          <text class=\"vertex-label\" x=\"0\" y=\"-60\" font-size=\"20\" text-anchor=\"middle\" fill=\"white\" dominant-baseline=\"middle\">1</text>\n          <text class=\"vertex-label\" x=\"50\" y=\"30\" font-size=\"20\" text-anchor=\"middle\" fill=\"white\" dominant-baseline=\"middle\">2</text>\n          <text class=\"vertex-label\" x=\"-50\" y=\"30\" font-size=\"20\" text-anchor=\"middle\" fill=\"white\" dominant-baseline=\"middle\">3</text>\n        </g>\n      </svg>\n      \n      <div class=\"buttons\">\n        <button id=\"identity-button\"\n          @pointerdown=\"${() => { this.resetTriangle(); this.raiseTriangle(); }}\"\n          @pointerup=\"${() => this.lowerTriangle()}\"\n          @pointercancel=\"${() => this.lowerTriangle()}\">\n          1 (Identity)\n        </button>\n        <button @pointerdown=\"${() => this.resetTriangle()}\" \n                @pointerup=\"${() => this.animateRotation(120, 500)}\" \n                @pointercancel=\"${() => this.animateRotation(120, 500)}\">\n          r (Rotate 120°)\n        </button>\n        <button @pointerdown=\"${() => this.resetTriangle()}\" \n                @pointerup=\"${() => this.animateRotation(240, 1000)}\" \n                @pointercancel=\"${() => this.animateRotation(240, 1000)}\">\n          r² (Rotate 240°)\n        </button>\n        <button @pointerdown=\"${() => this.resetTriangle()}\" \n                @pointerup=\"${() => this.animateFlip(500)}\" \n                @pointercancel=\"${() => this.animateFlip(500)}\">\n          f (Reflect)\n        </button>\n        <button @pointerdown=\"${() => this.resetTriangle()}\" \n                @pointerup=\"${() => this.animateFlipThenRotation(120, 500, 500)}\" \n                @pointercancel=\"${() => this.animateFlipThenRotation(120, 500, 500)}\">\n          r·f\n        </button>\n        <button @pointerdown=\"${() => this.resetTriangle()}\" \n                @pointerup=\"${() => this.animateFlipThenRotation(240, 500, 1000)}\" \n                @pointercancel=\"${() => this.animateFlipThenRotation(240, 500, 1000)}\">\n          r²·f\n        </button>\n      </div>\n      \n      <!-- Interactive sections for group properties -->\n      <div class=\"interactive\">\n        <section id=\"closure\">\n          <h2>Closure</h2>\n          <p>Select two elements to check closure under composition:</p>\n          <label for=\"closure-a\">a:</label>\n          <select id=\"closure-a\">\n            <option value=\"1\">1</option>\n            <option value=\"r\">r</option>\n            <option value=\"r2\">r²</option>\n            <option value=\"f\">f</option>\n            <option value=\"rf\">r·f</option>\n            <option value=\"r2f\">r²·f</option>\n          </select>\n          <label for=\"closure-b\">b:</label>\n          <select id=\"closure-b\">\n            <option value=\"1\">1</option>\n            <option value=\"r\">r</option>\n            <option value=\"r2\">r²</option>\n            <option value=\"f\">f</option>\n            <option value=\"rf\">r·f</option>\n            <option value=\"r2f\">r²·f</option>\n          </select>\n          <button id=\"check-closure\">Check Closure</button>\n          <div id=\"closure-result\" class=\"result\"></div>\n        </section>\n        \n        <section id=\"identity-property\">\n          <h2>Identity</h2>\n          <p>Select an element to see that composing with the identity yields the same element:</p>\n          <label for=\"identity-element\">a:</label>\n          <select id=\"identity-element\">\n            <option value=\"1\">1</option>\n            <option value=\"r\">r</option>\n            <option value=\"r2\">r²</option>\n            <option value=\"f\">f</option>\n            <option value=\"rf\">r·f</option>\n            <option value=\"r2f\">r²·f</option>\n          </select>\n          <button id=\"check-identity-prop\">Check Identity</button>\n          <div id=\"identity-result-prop\" class=\"result\"></div>\n        </section>\n        \n        <section id=\"associativity-property\">\n          <h2>Associativity</h2>\n          <p>Select three elements to verify associativity: (a·b)·c = a·(b·c)</p>\n          <label for=\"assoc-a\">a:</label>\n          <select id=\"assoc-a\">\n            <option value=\"1\">1</option>\n            <option value=\"r\">r</option>\n            <option value=\"r2\">r²</option>\n            <option value=\"f\">f</option>\n            <option value=\"rf\">r·f</option>\n            <option value=\"r2f\">r²·f</option>\n          </select>\n          <label for=\"assoc-b\">b:</label>\n          <select id=\"assoc-b\">\n            <option value=\"1\">1</option>\n            <option value=\"r\">r</option>\n            <option value=\"r2\">r²</option>\n            <option value=\"f\">f</option>\n            <option value=\"rf\">r·f</option>\n            <option value=\"r2f\">r²·f</option>\n          </select>\n          <label for=\"assoc-c\">c:</label>\n          <select id=\"assoc-c\">\n            <option value=\"1\">1</option>\n            <option value=\"r\">r</option>\n            <option value=\"r2\">r²</option>\n            <option value=\"f\">f</option>\n            <option value=\"rf\">r·f</option>\n            <option value=\"r2f\">r²·f</option>\n          </select>\n          <button id=\"check-associativity-prop\">Check Associativity</button>\n          <div id=\"associativity-result-prop\" class=\"result\"></div>\n        </section>\n        \n        <section id=\"inverse-property\">\n          <h2>Inverse</h2>\n          <p>Select an element to find its inverse (b such that a·b = 1):</p>\n          <label for=\"inverse-element\">a:</label>\n          <select id=\"inverse-element\">\n            <option value=\"1\">1</option>\n            <option value=\"r\">r</option>\n            <option value=\"r2\">r²</option>\n            <option value=\"f\">f</option>\n            <option value=\"rf\">r·f</option>\n            <option value=\"r2f\">r²·f</option>\n          </select>\n          <button id=\"check-inverse-prop\">Check Inverse</button>\n          <div id=\"inverse-result-prop\" class=\"result\"></div>\n        </section>\n      </div>\n    `;\n    render(template, this.shadowRoot);\n  }\n}\n\ncustomElements.define(\"triangle-group-demo\", TriangleGroupDemo);\n"],"names":["elementToObj","k","d","r","r2","f","rf","r2f","composeD3","a","b","A","B","key","val","displayD3","elem","TriangleGroupDemo","HTMLElement","constructor","super","this","attachShadow","mode","connectedCallback","render","setupInteractive","resetTriangle","group","shadowRoot","getElementById","getAnimations","forEach","animation","cancel","setAttribute","querySelectorAll","label","removeAttribute","animateRotation","targetAngle","duration","startTime","step","timestamp","elapsed","progress","Math","min","currentAngle","requestAnimationFrame","x","getAttribute","y","animateFlip","currentScale","animateFlipThenRotation","flipDuration","rotationDuration","startTimeFlip","stepFlip","startRotationPhase","startTimeRot","stepRotation","currentRotation","raiseTriangle","current","animate","transform","fill","easing","lowerTriangle","addEventListener","value","product","innerHTML","c","left","right","msg","inv","candidate","inverseD3","prod","template","html","customElements","define"],"mappings":"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"}