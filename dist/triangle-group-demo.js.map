{"version":3,"file":"triangle-group-demo.js","sources":["../triangle-group-demo.js"],"sourcesContent":["import { html, render } from \"lit\";\n\n// --- Helper functions for D₃ ---\n// Represent each element as an object { k, d } where k ∈ {0,1,2} and d ∈ {0,1}.\n// Here, d = 0 means no reflection (a rotation) and d = 1 means reflection.\n// Mapping:\n//   \"1\"   → { k: 0, d: 0 }\n//   \"r\"   → { k: 1, d: 0 }\n//   \"r2\"  → { k: 2, d: 0 }\n//   \"f\"   → { k: 0, d: 1 }\n//   \"rf\"  → { k: 1, d: 1 }\n//   \"r2f\" → { k: 2, d: 1 }\nconst elementToObj = {\n  \"1\":   { k: 0, d: 0 },\n  \"r\":   { k: 1, d: 0 },\n  \"r2\":  { k: 2, d: 0 },\n  \"f\":   { k: 0, d: 1 },\n  \"rf\":  { k: 1, d: 1 },\n  \"r2f\": { k: 2, d: 1 }\n};\n\nfunction composeD3(a, b) {\n  const A = elementToObj[a];\n  const B = elementToObj[b];\n  // Multiplication: (k₁, d₁)·(k₂, d₂) = (k₁ + (-1)^(d₁)*k₂ mod 3, d₁+d₂ mod 2)\n  let k = A.k + (A.d === 0 ? B.k : -B.k);\n  k = ((k % 3) + 3) % 3;\n  const d = (A.d + B.d) % 2;\n  for (let key in elementToObj) {\n    const val = elementToObj[key];\n    if (val.k === k && val.d === d) return key;\n  }\n  return null;\n}\n\nfunction inverseD3(a) {\n  for (let candidate in elementToObj) {\n    if (composeD3(a, candidate) === \"1\") return candidate;\n  }\n  return null;\n}\n\n/**\n * Convert a D₃ element (as a string) to a MathML representation.\n */\nfunction displayD3(elem) {\n  switch (elem) {\n    case \"1\":\n      return \"<mi>1</mi>\";\n    case \"r\":\n      return \"<mi>r</mi>\";\n    case \"r2\":\n      return \"<msup><mi>r</mi><mn>2</mn></msup>\";\n    case \"f\":\n      return \"<mi>f</mi>\";\n    case \"rf\":\n      return \"<mrow><mi>r</mi><mo>&#x22C5;</mo><mi>f</mi></mrow>\";\n    case \"r2f\":\n      return \"<mrow><msup><mi>r</mi><mn>2</mn></msup><mo>&#x22C5;</mo><mi>f</mi></mrow>\";\n    default:\n      return `<mi>${elem}</mi>`;\n  }\n}\n\n// --- The TriangleGroupDemo Component ---\nclass TriangleGroupDemo extends HTMLElement {\n  constructor() {\n    super();\n    this.attachShadow({ mode: \"open\" });\n    // currentElement holds the “accumulated” D₃ element (starts with the identity)\n    this.currentElement = \"1\";\n  }\n  \n  connectedCallback() {\n    this.render();\n    this.resetDemo(); // Reset the demo (and formula-display) on load.\n    this.setupInteractive();\n  }\n  \n  /**\n   * Reset the triangle’s transformations and vertex labels.\n   */\n  resetTriangle() {\n    const group = this.shadowRoot.getElementById(\"triangle-group\");\n    if (group) {\n      group.getAnimations().forEach(animation => animation.cancel());\n      // Reset the transform to identity.\n      group.setAttribute(\"transform\", \"rotate(0) scale(1)\");\n    }\n    const labels = this.shadowRoot.querySelectorAll('.vertex-label');\n    labels.forEach(label => label.removeAttribute('transform'));\n  }\n  \n  /**\n   * Reset the demo (animation and “formula”) to the identity.\n   */\n  resetDemo() {\n    this.resetTriangle();\n    this.currentElement = \"1\";\n    const formulaDisplay = this.shadowRoot.getElementById(\"formula-display\");\n    if (formulaDisplay) {\n      formulaDisplay.innerHTML = `Result: <math><mrow>${displayD3(\"1\")}<mo>=</mo>${displayD3(\"1\")}</mrow></math>`;\n    }\n  }\n  \n  /**\n   * Update the “formula display” showing the multiplication step:\n   * (new transformation) · (current state) = (new state)\n   */\n  updateFormulaDisplay(factorLeft, factorRight, product) {\n    const formulaDisplay = this.shadowRoot.getElementById(\"formula-display\");\n    if (formulaDisplay) {\n      formulaDisplay.innerHTML =\n        `Result: <math><mrow>${displayD3(factorLeft)}<mo>&#x22C5;</mo>${displayD3(factorRight)}<mo>=</mo>${displayD3(product)}</mrow></math>`;\n    }\n  }\n  \n  // --- Helpers to read current transform values ---\n  \n  getCurrentRotation() {\n    const group = this.shadowRoot.getElementById(\"triangle-group\");\n    const transform = group.getAttribute(\"transform\") || \"\";\n    const match = transform.match(/rotate\\(([-\\d.]+)/);\n    return match ? parseFloat(match[1]) : 0;\n  }\n  \n  getCurrentScale() {\n    const group = this.shadowRoot.getElementById(\"triangle-group\");\n    const transform = group.getAttribute(\"transform\") || \"\";\n    const match = transform.match(/scale\\(([-\\d.]+)/);\n    return match ? parseFloat(match[1]) : 1;\n  }\n  \n  /**\n   * Animate a rotation relative to the current rotation.\n   * The triangle rotates from its current rotation to (current rotation + targetAngle)\n   * while preserving the current scale.\n   */\n  animateRotation(targetAngle, duration = 500) {\n    const group = this.shadowRoot.getElementById(\"triangle-group\");\n    if (!group) return;\n    let startTime = null;\n    const startAngle = this.getCurrentRotation();\n    const finalAngle = startAngle + targetAngle;\n    const currentScale = this.getCurrentScale();\n    const step = (timestamp) => {\n      if (!startTime) startTime = timestamp;\n      const elapsed  = timestamp - startTime;\n      const progress = Math.min(elapsed / duration, 1);\n      const currentAngle = startAngle + progress * (finalAngle - startAngle);\n      group.setAttribute(\"transform\", `rotate(${currentAngle}) scale(${currentScale}, 1)`);\n      if (progress < 1) {\n        requestAnimationFrame(step);\n      } else {\n        // Adjust vertex labels to counter the rotation.\n        const labels = this.shadowRoot.querySelectorAll('.vertex-label');\n        labels.forEach(label => {\n          const x = label.getAttribute(\"x\");\n          const y = label.getAttribute(\"y\");\n          label.setAttribute(\"transform\", `rotate(-${finalAngle}, ${x}, ${y})`);\n        });\n      }\n    };\n    requestAnimationFrame(step);\n  }\n  \n  /**\n   * Animate a horizontal flip (reflection) about the triangle’s top vertex.\n   * (In your polygon the top vertex is at (0,-100).)\n   * This is done by composing the transform:\n   *   rotate(currentRotation) translate(0, 100) scale(s,1) translate(0, -100)\n   * where s is animated from 1 to -1.\n   */\n  animateFlip(duration = 500) {\n    const group = this.shadowRoot.getElementById(\"triangle-group\");\n    if (!group) return;\n    let startTime = null;\n    const startS = 1;\n    const targetS = -1;\n    const currentRotation = this.getCurrentRotation();\n    const step = (timestamp) => {\n      if (!startTime) startTime = timestamp;\n      const elapsed  = timestamp - startTime;\n      const progress = Math.min(elapsed / duration, 1);\n      const s = startS + progress * (targetS - startS);\n      // Reflect about (0,-100): first translate so that (0,-100) becomes the origin.\n      group.setAttribute(\"transform\",\n        `rotate(${currentRotation}) translate(0, 100) scale(${s},1) translate(0, -100)`\n      );\n      if (progress < 1) {\n        requestAnimationFrame(step);\n      } else {\n        // Adjust vertex labels as before.\n        const labels = this.shadowRoot.querySelectorAll('.vertex-label');\n        labels.forEach(label => {\n          const x = label.getAttribute(\"x\");\n          const y = label.getAttribute(\"y\");\n          label.setAttribute(\"transform\",\n            `translate(${x}, ${y}) scale(-1,1) translate(${-x}, ${-y})`\n          );\n        });\n      }\n    };\n    requestAnimationFrame(step);\n  }\n  \n  /**\n   * Animate a flip then a rotation.\n   * First the triangle flips about its top vertex (using the same composite transform as animateFlip)\n   * and then rotates by targetAngle.\n   */\n  animateFlipThenRotation(targetAngle, flipDuration = 500, rotationDuration = 500) {\n    const group = this.shadowRoot.getElementById(\"triangle-group\");\n    if (!group) return;\n    const initialRotation = this.getCurrentRotation();\n    const startS = 1;\n    const targetS = -1;\n    let startTimeFlip = null;\n    const stepFlip = (timestamp) => {\n      if (!startTimeFlip) startTimeFlip = timestamp;\n      const elapsed = timestamp - startTimeFlip;\n      const progress = Math.min(elapsed / flipDuration, 1);\n      const s = startS + progress * (targetS - startS);\n      // During flip, keep rotation constant.\n      group.setAttribute(\"transform\",\n        `rotate(${initialRotation}) translate(0, 100) scale(${s},1) translate(0, -100)`\n      );\n      if (progress < 1) {\n        requestAnimationFrame(stepFlip);\n      } else {\n        // Adjust labels for the flip.\n        const labels = this.shadowRoot.querySelectorAll('.vertex-label');\n        labels.forEach(label => {\n          const x = label.getAttribute(\"x\");\n          const y = label.getAttribute(\"y\");\n          label.setAttribute(\"transform\",\n            `translate(${x}, ${y}) scale(-1,1) translate(${-x}, ${-y})`\n          );\n        });\n        startRotationPhase();\n      }\n    };\n    const startRotationPhase = () => {\n      let startTimeRot = null;\n      const finalRotation = initialRotation + targetAngle;\n      const stepRotation = (timestamp) => {\n        if (!startTimeRot) startTimeRot = timestamp;\n        const elapsed = timestamp - startTimeRot;\n        const progress = Math.min(elapsed / rotationDuration, 1);\n        const currentRotation = initialRotation + progress * (finalRotation - initialRotation);\n        // Keep the flipped scale (-1) constant during rotation phase.\n        group.setAttribute(\"transform\",\n          `rotate(${currentRotation}) translate(0, 100) scale(${targetS},1) translate(0, -100)`\n        );\n        if (progress < 1) {\n          requestAnimationFrame(stepRotation);\n        } else {\n          const labels = this.shadowRoot.querySelectorAll('.vertex-label');\n          labels.forEach(label => {\n            const x = label.getAttribute(\"x\");\n            const y = label.getAttribute(\"y\");\n            label.setAttribute(\"transform\",\n              `translate(${x}, ${y}) scale(-1,1) rotate(-${finalRotation}) translate(${-x}, ${-y})`\n            );\n          });\n        }\n      };\n      requestAnimationFrame(stepRotation);\n    };\n    requestAnimationFrame(stepFlip);\n  }\n  \n  /**\n   * Visual “raise” effect.\n   * (This scales the triangle up slightly for visual feedback; it does not override the accumulated transform.)\n   */\n  raiseTriangle() {\n    const group = this.shadowRoot.getElementById(\"triangle-group\");\n    if (group) {\n      const current = group.getAttribute(\"transform\") || \"\";\n      group.animate([{ transform: current }, { transform: current + \" scale(1.2)\" }], {\n        duration: 150, fill: \"forwards\", easing: \"ease-out\"\n      });\n    }\n  }\n  \n  /**\n   * Visual “lower” effect.\n   * (Used with the identity button to give press–release feedback without resetting the accumulated transform.)\n   */\n  lowerTriangle() {\n    const group = this.shadowRoot.getElementById(\"triangle-group\");\n    if (group) {\n      const current = group.getAttribute(\"transform\") || \"\";\n      group.animate([{ transform: current }, { transform: current.replace(/scale\\([^)]*\\)/, \"scale(1)\") }], {\n        duration: 150, fill: \"forwards\", easing: \"ease-out\"\n      });\n    }\n  }\n  \n  /**\n   * Set up the interactive sections for the D₃ group properties.\n   * (These remain unchanged from before.)\n   */\n  setupInteractive() {\n    // Closure\n    this.shadowRoot.getElementById('check-closure').addEventListener('click', () => {\n      const a = this.shadowRoot.getElementById('closure-a').value;\n      const b = this.shadowRoot.getElementById('closure-b').value;\n      const product = composeD3(a, b);\n      this.shadowRoot.getElementById('closure-result').innerHTML =\n        `Result: <math><mrow>${displayD3(a)}<mo>&#x22C5;</mo>${displayD3(b)}<mo>=</mo>${displayD3(product)}</mrow></math>. Closure holds because the result is in D₃.`;\n    });\n    // Identity property: 1 · a = a.\n    this.shadowRoot.getElementById('check-identity-prop').addEventListener('click', () => {\n      const a = this.shadowRoot.getElementById('identity-element').value;\n      const product = composeD3(\"1\", a);\n      this.shadowRoot.getElementById('identity-result-prop').innerHTML =\n        `Result: <math><mrow>${displayD3(\"1\")}<mo>&#x22C5;</mo>${displayD3(a)}<mo>=</mo>${displayD3(product)}</mrow></math>. The identity element is 1.`;\n    });\n    // Associativity: (a · b) · c = a · (b · c)\n    this.shadowRoot.getElementById('check-associativity-prop').addEventListener('click', () => {\n      const a = this.shadowRoot.getElementById('assoc-a').value;\n      const b = this.shadowRoot.getElementById('assoc-b').value;\n      const c = this.shadowRoot.getElementById('assoc-c').value;\n      const left = composeD3(composeD3(a, b), c);\n      const right = composeD3(a, composeD3(b, c));\n      let msg = `Result: <math><mrow>( ${displayD3(a)}<mo>&#x22C5;</mo>${displayD3(b)} )<mo>&#x22C5;</mo>${displayD3(c)}<mo>=</mo>${displayD3(left)}</mrow></math> and <math><mrow>${displayD3(a)}<mo>&#x22C5;</mo>( ${displayD3(b)}<mo>&#x22C5;</mo>${displayD3(c)} )<mo>=</mo>${displayD3(right)}</mrow></math>. `;\n      msg += (left === right) ? \"Associativity holds.\" : \"Associativity fails!\";\n      this.shadowRoot.getElementById('associativity-result-prop').innerHTML = msg;\n    });\n    // Inverse: a · a⁻¹ = 1.\n    this.shadowRoot.getElementById('check-inverse-prop').addEventListener('click', () => {\n      const a = this.shadowRoot.getElementById('inverse-element').value;\n      const inv = inverseD3(a);\n      const prod = composeD3(a, inv);\n      this.shadowRoot.getElementById('inverse-result-prop').innerHTML =\n        `Result: <math><mrow>${displayD3(a)}<mo>&#x22C5;</mo>${displayD3(inv)}<mo>=</mo><mi>1</mi></mrow></math> Inverse holds.`;\n    });\n  }\n  \n  render() {\n    const template = html`\n      <style>\n        :host {\n          display: block;\n          font-family: Arial, sans-serif;\n          margin: 0;\n          padding: 20px;\n          background-color: #eef;\n        }\n        h1 {\n          text-align: center;\n          color: #333;\n        }\n        svg {\n          display: block;\n          margin: 0 auto 20px;\n        }\n        .buttons, .interactive {\n          text-align: center;\n          margin-top: 20px;\n        }\n        button {\n          padding: 8px 16px;\n          margin: 5px;\n          font-size: 14px;\n          cursor: pointer;\n          border: none;\n          border-radius: 4px;\n          background-color: #007bff;\n          color: #fff;\n          transition: background-color 0.3s;\n        }\n        button:hover {\n          background-color: #0056b3;\n        }\n        #formula-display {\n          text-align: center;\n          font-size: 24px;\n          margin-bottom: 20px;\n        }\n        section {\n          background: #fff;\n          border: 1px solid #ccc;\n          padding: 15px;\n          margin: 20px auto;\n          max-width: 600px;\n          border-radius: 8px;\n          text-align: left;\n        }\n        section h2 {\n          margin-top: 0;\n          text-align: center;\n        }\n        section label {\n          margin-right: 10px;\n        }\n        section select, section input {\n          margin: 5px;\n          padding: 5px;\n          width: 80px;\n        }\n        section div.result {\n          margin-top: 10px;\n          font-weight: bold;\n          text-align: center;\n        }\n      </style>\n      <h1>Triangle Group Demonstration (Dihedral Group D₃)</h1>\n      \n      <!-- Formula display: will be reset to identity on load -->\n      <div id=\"formula-display\"></div>\n      \n      <!-- Animated triangle with transformation buttons -->\n      <svg id=\"triangle-svg\" width=\"300\" height=\"300\" viewBox=\"-150 -150 300 300\">\n        <g id=\"triangle-group\">\n          <polygon points=\"0,-100 86.6,50 -86.6,50\" fill=\"#007BFF\" stroke=\"#0056b3\" stroke-width=\"3\"></polygon>\n          <text x=\"0\" y=\"10\" font-size=\"36\" text-anchor=\"middle\" fill=\"white\">🐱</text>\n          <text class=\"vertex-label\" x=\"0\" y=\"-60\" font-size=\"20\" text-anchor=\"middle\" fill=\"white\" dominant-baseline=\"middle\">1</text>\n          <text class=\"vertex-label\" x=\"50\" y=\"30\" font-size=\"20\" text-anchor=\"middle\" fill=\"white\" dominant-baseline=\"middle\">2</text>\n          <text class=\"vertex-label\" x=\"-50\" y=\"30\" font-size=\"20\" text-anchor=\"middle\" fill=\"white\" dominant-baseline=\"middle\">3</text>\n        </g>\n      </svg>\n      \n      <div class=\"buttons\">\n        <!-- Identity button: New element = 1 · (current) -->\n        <button id=\"identity-button\"\n          @pointerdown=\"${() => this.raiseTriangle()}\"\n          @pointerup=\"${() => {\n              const trans = '1';\n              const newElem = composeD3(trans, this.currentElement);\n              this.updateFormulaDisplay(trans, this.currentElement, newElem);\n              this.currentElement = newElem;\n              this.lowerTriangle();\n          }}\"\n          @pointercancel=\"${() => {}}\">\n          1 (Identity)\n        </button>\n        <!-- Rotation by 120°: New element = r · (current) -->\n        <button \n          @pointerdown=\"${() => {}}\"\n          @pointerup=\"${() => {\n              const trans = 'r';\n              const newElem = composeD3(trans, this.currentElement);\n              this.updateFormulaDisplay(trans, this.currentElement, newElem);\n              this.currentElement = newElem;\n              this.animateRotation(120, 500);\n          }}\"\n          @pointercancel=\"${() => this.animateRotation(120, 500)}\">\n          r (Rotate 120°)\n        </button>\n        <!-- Rotation by 240° (r²): New element = r² · (current) -->\n        <button \n          @pointerdown=\"${() => {}}\"\n          @pointerup=\"${() => {\n              const trans = 'r2';\n              const newElem = composeD3(trans, this.currentElement);\n              this.updateFormulaDisplay(trans, this.currentElement, newElem);\n              this.currentElement = newElem;\n              this.animateRotation(240, 1000);\n          }}\"\n          @pointercancel=\"${() => this.animateRotation(240, 1000)}\">\n          r² (Rotate 240°)\n        </button>\n        <!-- Reflection: New element = f · (current) -->\n        <button \n          @pointerdown=\"${() => {}}\"\n          @pointerup=\"${() => {\n              const trans = 'f';\n              const newElem = composeD3(trans, this.currentElement);\n              this.updateFormulaDisplay(trans, this.currentElement, newElem);\n              this.currentElement = newElem;\n              this.animateFlip(500);\n          }}\"\n          @pointercancel=\"${() => this.animateFlip(500)}\">\n          f (Reflect)\n        </button>\n        <!-- Reflection then rotation (r · f): New element = (r·f) · (current) -->\n        <button \n          @pointerdown=\"${() => {}}\"\n          @pointerup=\"${() => {\n              const trans = 'rf';\n              const newElem = composeD3(trans, this.currentElement);\n              this.updateFormulaDisplay(trans, this.currentElement, newElem);\n              this.currentElement = newElem;\n              this.animateFlipThenRotation(120, 500, 500);\n          }}\"\n          @pointercancel=\"${() => this.animateFlipThenRotation(120, 500, 500)}\">\n          r·f\n        </button>\n        <!-- Reflection then rotation (r² · f): New element = (r²·f) · (current) -->\n        <button \n          @pointerdown=\"${() => {}}\"\n          @pointerup=\"${() => {\n              const trans = 'r2f';\n              const newElem = composeD3(trans, this.currentElement);\n              this.updateFormulaDisplay(trans, this.currentElement, newElem);\n              this.currentElement = newElem;\n              this.animateFlipThenRotation(240, 500, 1000);\n          }}\"\n          @pointercancel=\"${() => this.animateFlipThenRotation(240, 500, 1000)}\">\n          r²·f\n        </button>\n        <!-- Explicit Reset Button -->\n        <button id=\"reset-button\"\n          @pointerup=\"${() => this.resetDemo()}\">\n          Reset\n        </button>\n      </div>\n      \n      <!-- Interactive sections for group properties -->\n      <div class=\"interactive\">\n        <section id=\"closure\">\n          <h2>Closure</h2>\n          <p>Select two elements to check closure under composition:</p>\n          <label for=\"closure-a\">a:</label>\n          <select id=\"closure-a\">\n            <option value=\"1\">1</option>\n            <option value=\"r\">r</option>\n            <option value=\"r2\">r²</option>\n            <option value=\"f\">f</option>\n            <option value=\"rf\">r·f</option>\n            <option value=\"r2f\">r²·f</option>\n          </select>\n          <label for=\"closure-b\">b:</label>\n          <select id=\"closure-b\">\n            <option value=\"1\">1</option>\n            <option value=\"r\">r</option>\n            <option value=\"r2\">r²</option>\n            <option value=\"f\">f</option>\n            <option value=\"rf\">r·f</option>\n            <option value=\"r2f\">r²·f</option>\n          </select>\n          <button id=\"check-closure\">Check Closure</button>\n          <div id=\"closure-result\" class=\"result\"></div>\n        </section>\n        \n        <section id=\"identity-property\">\n          <h2>Identity</h2>\n          <p>Select an element to see that composing with the identity yields the same element:</p>\n          <label for=\"identity-element\">a:</label>\n          <select id=\"identity-element\">\n            <option value=\"1\">1</option>\n            <option value=\"r\">r</option>\n            <option value=\"r2\">r²</option>\n            <option value=\"f\">f</option>\n            <option value=\"rf\">r·f</option>\n            <option value=\"r2f\">r²·f</option>\n          </select>\n          <button id=\"check-identity-prop\">Check Identity</button>\n          <div id=\"identity-result-prop\" class=\"result\"></div>\n        </section>\n        \n        <section id=\"associativity-property\">\n          <h2>Associativity</h2>\n          <p>Select three elements to verify associativity: (a·b)·c = a·(b·c)</p>\n          <label for=\"assoc-a\">a:</label>\n          <select id=\"assoc-a\">\n            <option value=\"1\">1</option>\n            <option value=\"r\">r</option>\n            <option value=\"r2\">r²</option>\n            <option value=\"f\">f</option>\n            <option value=\"rf\">r·f</option>\n            <option value=\"r2f\">r²·f</option>\n          </select>\n          <label for=\"assoc-b\">b:</label>\n          <select id=\"assoc-b\">\n            <option value=\"1\">1</option>\n            <option value=\"r\">r</option>\n            <option value=\"r2\">r²</option>\n            <option value=\"f\">f</option>\n            <option value=\"rf\">r·f</option>\n            <option value=\"r2f\">r²·f</option>\n          </select>\n          <label for=\"assoc-c\">c:</label>\n          <select id=\"assoc-c\">\n            <option value=\"1\">1</option>\n            <option value=\"r\">r</option>\n            <option value=\"r2\">r²</option>\n            <option value=\"f\">f</option>\n            <option value=\"rf\">r·f</option>\n            <option value=\"r2f\">r²·f</option>\n          </select>\n          <button id=\"check-associativity-prop\">Check Associativity</button>\n          <div id=\"associativity-result-prop\" class=\"result\"></div>\n        </section>\n        \n        <section id=\"inverse-property\">\n          <h2>Inverse</h2>\n          <p>Select an element to find its inverse (b such that a·b = 1):</p>\n          <label for=\"inverse-element\">a:</label>\n          <select id=\"inverse-element\">\n            <option value=\"1\">1</option>\n            <option value=\"r\">r</option>\n            <option value=\"r2\">r²</option>\n            <option value=\"f\">f</option>\n            <option value=\"rf\">r·f</option>\n            <option value=\"r2f\">r²·f</option>\n          </select>\n          <button id=\"check-inverse-prop\">Check Inverse</button>\n          <div id=\"inverse-result-prop\" class=\"result\"></div>\n        </section>\n      </div>\n    `;\n    render(template, this.shadowRoot);\n  }\n}\n\ncustomElements.define(\"triangle-group-demo\", TriangleGroupDemo);\n"],"names":["elementToObj","k","d","r","r2","f","rf","r2f","composeD3","a","b","A","B","key","val","displayD3","elem","TriangleGroupDemo","HTMLElement","constructor","super","this","attachShadow","mode","currentElement","connectedCallback","render","resetDemo","setupInteractive","resetTriangle","group","shadowRoot","getElementById","getAnimations","forEach","animation","cancel","setAttribute","querySelectorAll","label","removeAttribute","formulaDisplay","innerHTML","updateFormulaDisplay","factorLeft","factorRight","product","getCurrentRotation","match","getAttribute","parseFloat","getCurrentScale","animateRotation","targetAngle","duration","startTime","startAngle","finalAngle","currentScale","step","timestamp","elapsed","progress","Math","min","currentAngle","requestAnimationFrame","x","y","animateFlip","currentRotation","s","animateFlipThenRotation","flipDuration","rotationDuration","initialRotation","startTimeFlip","stepFlip","startRotationPhase","startTimeRot","finalRotation","stepRotation","raiseTriangle","current","animate","transform","fill","easing","lowerTriangle","replace","addEventListener","value","c","left","right","msg","inv","candidate","inverseD3","template","html","newElem","customElements","define"],"mappings":"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"}