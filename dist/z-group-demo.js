class t extends HTMLElement{constructor(){super(),this.attachShadow({mode:"open"}),this.shadowRoot.innerHTML='\n      <style>\n        :host {\n          display: block;\n          font-family: Arial, sans-serif;\n          background-color: #eef;\n          margin: 0;\n          padding: 20px;\n        }\n        h1 {\n          text-align: center;\n          color: #333;\n        }\n        section {\n          background-color: #fff;\n          border: 1px solid #ccc;\n          padding: 15px;\n          margin: 20px 0;\n          border-radius: 8px;\n        }\n        label {\n          margin-right: 10px;\n        }\n        input {\n          margin: 5px;\n          padding: 5px;\n          width: 60px;\n        }\n        button {\n          padding: 8px 16px;\n          font-size: 14px;\n          margin-top: 10px;\n          cursor: pointer;\n          border: none;\n          border-radius: 4px;\n          background-color: #007BFF;\n          color: #fff;\n          transition: background-color 0.3s;\n        }\n        button:hover {\n          background-color: #0056b3;\n        }\n        div {\n          margin-top: 10px;\n          font-weight: bold;\n        }\n      </style>\n      <h1>Z Group Demonstration</h1>\n      <p>\n        This demonstration shows the group properties of the set of integers \n        <math xmlns="http://www.w3.org/1998/Math/MathML">\n          <mi>&#x2124;</mi>\n        </math>\n        under addition.\n      </p>\n      \n      <section id="closure">\n        <h2>Closure</h2>\n        <p>\n          Enter two integers to demonstrate closure:\n          <math xmlns="http://www.w3.org/1998/Math/MathML">\n            <mi>a</mi>\n            <mo>+</mo>\n            <mi>b</mi>\n            <mo>=</mo>\n            <mi>&#x2124;</mi>\n          </math>\n        </p>\n        <label for="closure-a">a:</label>\n        <input id="closure-a" type="number" step="1">\n        <label for="closure-b">b:</label>\n        <input id="closure-b" type="number" step="1">\n        <button id="check-closure">Check Closure</button>\n        <div id="closure-result"></div>\n      </section>\n      \n      <section id="identity">\n        <h2>Identity</h2>\n        <p>\n          Enter an integer to demonstrate the identity element:\n          <math xmlns="http://www.w3.org/1998/Math/MathML">\n            <mi>a</mi>\n            <mo>+</mo>\n            <mn>0</mn>\n            <mo>=</mo>\n            <mi>a</mi>\n          </math>\n        </p>\n        <label for="identity-a">a:</label>\n        <input id="identity-a" type="number" step="1">\n        <button id="check-identity">Check Identity</button>\n        <div id="identity-result"></div>\n      </section>\n      \n      <section id="associativity">\n        <h2>Associativity</h2>\n        <p>\n          Enter three integers to demonstrate associativity:\n          <math xmlns="http://www.w3.org/1998/Math/MathML">\n            <mo>(</mo>\n            <mi>a</mi>\n            <mo>+</mo>\n            <mi>b</mi>\n            <mo>)</mo>\n            <mo>+</mo>\n            <mi>c</mi>\n            <mo>=</mo>\n            <mi>a</mi>\n            <mo>+</mo>\n            <mo>(</mo>\n            <mi>b</mi>\n            <mo>+</mo>\n            <mi>c</mi>\n            <mo>)</mo>\n          </math>\n        </p>\n        <label for="assoc-a">a:</label>\n        <input id="assoc-a" type="number" step="1">\n        <label for="assoc-b">b:</label>\n        <input id="assoc-b" type="number" step="1">\n        <label for="assoc-c">c:</label>\n        <input id="assoc-c" type="number" step="1">\n        <button id="check-associativity">Check Associativity</button>\n        <div id="associativity-result"></div>\n      </section>\n      \n      <section id="inverse">\n        <h2>Inverse</h2>\n        <p>\n          Enter an integer to demonstrate the inverse property:\n          <math xmlns="http://www.w3.org/1998/Math/MathML">\n            <mi>a</mi>\n            <mo>+</mo>\n            <mrow>\n              <mo>(</mo>\n              <mo>&#x2212;</mo>\n              <mi>a</mi>\n              <mo>)</mo>\n            </mrow>\n            <mo>=</mo>\n            <mn>0</mn>\n          </math>\n        </p>\n        <label for="inverse-a">a:</label>\n        <input id="inverse-a" type="number" step="1">\n        <button id="check-inverse">Check Inverse</button>\n        <div id="inverse-result"></div>\n      </section>\n    '}connectedCallback(){this.shadowRoot.getElementById("check-closure").addEventListener("click",(()=>{const t=parseInt(this.shadowRoot.getElementById("closure-a").value,10),n=parseInt(this.shadowRoot.getElementById("closure-b").value,10);if(isNaN(t)||isNaN(n))return void(this.shadowRoot.getElementById("closure-result").textContent="Please enter valid integers for a and b.");const e=t+n;this.shadowRoot.getElementById("closure-result").textContent=`Result: ${t} + ${n} = ${e}. Closure holds because the sum is an integer.`})),this.shadowRoot.getElementById("check-identity").addEventListener("click",(()=>{const t=parseInt(this.shadowRoot.getElementById("identity-a").value,10);if(isNaN(t))return void(this.shadowRoot.getElementById("identity-result").textContent="Please enter a valid integer for a.");const n=t+0;this.shadowRoot.getElementById("identity-result").textContent=`Result: ${t} + 0 = ${n}. The identity element in (ℤ, +) is 0.`})),this.shadowRoot.getElementById("check-associativity").addEventListener("click",(()=>{const t=parseInt(this.shadowRoot.getElementById("assoc-a").value,10),n=parseInt(this.shadowRoot.getElementById("assoc-b").value,10),e=parseInt(this.shadowRoot.getElementById("assoc-c").value,10);if(isNaN(t)||isNaN(n)||isNaN(e))return void(this.shadowRoot.getElementById("associativity-result").textContent="Please enter valid integers for a, b, and c.");const o=t+n+e,i=t+(n+e);let s=`Result: ( ${t} + ${n} ) + ${e} = ${o} and ${t} + ( ${n} + ${e} ) = ${i}. `;s+=o===i?"Associativity holds.":"Associativity does not hold!",this.shadowRoot.getElementById("associativity-result").textContent=s})),this.shadowRoot.getElementById("check-inverse").addEventListener("click",(()=>{const t=parseInt(this.shadowRoot.getElementById("inverse-a").value,10);if(isNaN(t))return void(this.shadowRoot.getElementById("inverse-result").textContent="Please enter a valid integer for a.");const n=-t,e=t+n;this.shadowRoot.getElementById("inverse-result").textContent=`Result: ${t} + (${n}) = ${e}. Every integer a has an inverse (–a) such that a + (–a) = 0.`}))}}customElements.define("z-group-demo",t);
//# sourceMappingURL=z-group-demo.js.map
